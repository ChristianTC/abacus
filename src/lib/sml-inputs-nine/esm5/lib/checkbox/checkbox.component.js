import { __decorate } from "tslib";
import { Component, OnInit, Input, Output, EventEmitter, ElementRef } from '@angular/core';
var CheckboxComponent = /** @class */ (function () {
    function CheckboxComponent(elementRef) {
        this.elementRef = elementRef;
        this.value = false;
        this.getvalue = new EventEmitter;
    }
    CheckboxComponent.prototype.ngOnInit = function () { };
    CheckboxComponent.prototype.ngOnChanges = function (event) {
        if (event.checkboxStyle != undefined && event.checkboxStyle.currentValue != undefined) {
            var css = event.checkboxStyle.currentValue;
            this.elementRef.nativeElement.style.setProperty('--checkbox-width', css['width-height']);
            this.elementRef.nativeElement.style.setProperty('--checkbox-height', css['width-height']);
            this.elementRef.nativeElement.style.setProperty('--checkbox-border-width', css.borderwidth);
            this.elementRef.nativeElement.style.setProperty('--checkbox-border-radius', css.borderradius);
            this.elementRef.nativeElement.style.setProperty('--checkbox-border-color', css.bordercolor);
            this.elementRef.nativeElement.style.setProperty('--checkbox-background-checked', css.background);
            this.elementRef.nativeElement.style.setProperty('--checkbox-background-unchecked', css['background-unchecked']);
            this.elementRef.nativeElement.style.setProperty('--check-color', css.colorcheck);
            this.elementRef.nativeElement.style.setProperty('--checkbox-tick-size', this.getTicFontSize(css));
        }
        if (event.style != undefined && event.style.currentValue != undefined) {
            var css = event.style.currentValue;
            this.elementRef.nativeElement.style.setProperty('--c-width', css['c-width']);
            this.elementRef.nativeElement.style.setProperty('--c-height', css['c-height']);
            this.elementRef.nativeElement.style.setProperty('--label-left', css['label-left']);
            this.elementRef.nativeElement.style.setProperty('--label-top', css['label-top']);
        }
        if (event.valueStyle != undefined && event.valueStyle.currentValue != undefined) {
            var css = event.valueStyle.currentValue;
            this.elementRef.nativeElement.style.setProperty('--value-left', css['value-left']);
            this.elementRef.nativeElement.style.setProperty('--value-top', css['value-top']);
        }
    };
    CheckboxComponent.prototype.getTicFontSize = function (css) {
        var h = css['width-height'].replace('px', '');
        return (parseInt(h) / 2) + 'px';
    };
    CheckboxComponent.prototype.onChange = function (event) {
        this.getvalue.emit(event.target.checked);
    };
    CheckboxComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "labeltext", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "style", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "switchStyle", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "borderStyle", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "signalStyle", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "valueStyle", void 0);
    __decorate([
        Input()
    ], CheckboxComponent.prototype, "checkboxStyle", void 0);
    __decorate([
        Output()
    ], CheckboxComponent.prototype, "getvalue", void 0);
    CheckboxComponent = __decorate([
        Component({
            selector: 'sml-input-checkbox',
            template: "\n  <div class=\"position-relative\">\n\t<div class=\"input-field\" [ngClass]=\"{'float-group':switchStyle,'float-groupdd': !switchStyle,'signal-line': signalStyle}\"\n\t [ngStyle]=\"borderStyle\">\n\t\t<div class=\"checkbox\">\n\t\t\t<input type=\"checkbox\" [(ngModel)]=\"value\" [name]=\"name\" (change)=\"onChange($event)\" [id]=\"name\">\n\t\t\t<label class=\"label1\" [for]=\"name\"></label>\n\t\t\t<div class=\"vlabel\" [ngStyle]=\"valueStyle\">{{label}}</div>\n\t\t</div>\n\t\t<label class=\"label\" [ngStyle]=\"style\">{{labeltext}}</label>\n\t</div>\n  </div>\n  ",
            styles: ["\n  :host {\n    --c-width: 645px;\n    --c-height: 25px;\n    --checkbox-width: 20px;\n    --checkbox-height: 20px;\n    --checkbox-tick-size: 10px;\n    --checkbox-border-width: 1px;\n    --checkbox-border-radius: 4px;\n    --checkbox-border-color: #D5DBE0;\n    --checkbox-background-checked: #348fe2;\n    --checkbox-background-unchecked:#D5DBE0;\n    --check-color: #ffffff;\n    --label-left: 10px;\n    --label-top: 0px;\n    --value-left: 10px;\n    --value-top: 0px;\n  }\n  /* box css */\n  .position-relative {\n    position: relative;\n  }\n  .input-field {\n    border: 1px solid #dee2e6;\n    border-radius: 2px;\n    width: var(--c-width) !important;\n    min-height: var(--c-height) !important;\n    height: auto;\n  }\n  .vlabel{\n    line-height: var(--checkbox-height);\n    vertical-align: top;\n    margin-left: 5px;\n    margin-right: 10px;\n    display: inline-block;\n  }\n  .checkbox input[type=\"checkbox\"] {\n    opacity: 0;\n    position: absolute;\n    left: -9999px;\n  }\n  .checkbox{\n    display: block;\n    padding-top: 8px;\n    padding-right: 0.75rem;\n    padding-bottom: 4px;\n    padding-left: var(--value-left);\n    min-height: var(--c-height) !important;\n  }\n  .checkbox label {\n    position: relative;\n    display: inline-block;\n    width: var(--checkbox-width);\n    height: var(--checkbox-height);\n  }\n  .checkbox label::before,\n  .checkbox label::after {\n    position: absolute;\n    content: \"\";\n    display: inline-block;\n  }\n  .checkbox label::before{\n      height: var(--checkbox-height);\n      width: var(--checkbox-width);\n      border: 1px solid #D5DBE0;\n      border-radius: var(--checkbox-border-radius);\n      border-width: var(--checkbox-border-width)  !important;\n      border-color: var(--checkbox-border-color) !important;\n      left: 0px;\n      background: var(--checkbox-background-unchecked);\n  }\n  input[type=\"checkbox\"]:checked + label:before {\n    /*background: var(--checkbox-background-checked);\n    border: 1px solid;\n    border-radius: var(--checkbox-border-radius);\n    border-width: var(--checkbox-border-width)  !important;\n    border-color: var(--checkbox-border-color) !important;\n    text-align: center;*/\n    content: \"\u2713\";\n    font-size: 24px;\n    line-height: 0.6;\n    color: #6ba238;\n    transition: all .2s;\n    font-family: Arial;\n    font-weight: bolder;\n  }\n  .checkbox input[type=\"checkbox\"]:checked + label::after {\n      transform: translate(-50%,-50%);\n      left: 50%;\n      top: 50%;\n      color: var( --check-color);\n      position: absolute;\n      content: \"\f00c\" !important;\n      -moz-osx-font-smoothing: grayscale;\n      -webkit-font-smoothing: antialiased;\n      display: inline-block;\n      font-size: var(--checkbox-tick-size);\n      font-style: normal;\n      font-variant: normal;\n      text-rendering: auto;\n      line-height: 1;\n      font-family: \"Font Awesome 5 Free\";\n      font-weight: 900;\n  }\n  .checkbox input[type=\"checkbox\"] + label::after {\n    content: none;\n  }\n  .checkbox input[type=\"checkbox\"]:checked + label::after {\n    content: \"\";\n  }\n  .signal-line{\n    border-top: none !important;\n    border-left: none !important;\n    border-right: none !important;\n    border-radius: 0px !important;\n  }\n  .label1{\n    margin-bottom: 0px !important;\n  }\n  .label {\n    position: absolute;\n    top: -24px;\n    left: 0px; \n    font-size: 12px;\n    transition: all 0.1s;\n  }\n  .float-group {\n    position: relative;\n    padding: 14px 24px 0px 0px;\n  }\n  .float-group .checkbox {\n      padding-top: var(--value-top);\n      padding-right: 0px;\n      padding-bottom: 0px;\n      padding-left: var(--value-left);\n  }\n  .float-group .label {\n    font-size: 9px;\n    font-weight: bold !important;  /* floating lable always bold */\n    position: absolute;\n    top: var(--label-top);\n    left: var(--label-left);\n    transform: translateY(0px);\n    transition: all 200ms;\n    opacity: 1;\n    margin: 0;\n    width: 87%;\n    height: auto;\n  }    \n  "]
        })
    ], CheckboxComponent);
    return CheckboxComponent;
}());
export { CheckboxComponent };
//# sourceMappingURL=data:application/json;base64,