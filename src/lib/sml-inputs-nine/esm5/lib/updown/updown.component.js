import { __decorate } from "tslib";
import { Component, OnInit, Input, Output, EventEmitter, ElementRef } from '@angular/core';
var UpdownComponent = /** @class */ (function () {
    function UpdownComponent(elementRef) {
        this.elementRef = elementRef;
        this.initialValue = 0;
        this.isNagative = false;
        this.textAlign = 'right';
        this.isLabel = false;
        this.staticStyle = false;
        this.valueChange = new EventEmitter();
    }
    UpdownComponent.prototype.ngOnInit = function () {
        if (this.initialValue == undefined || this.initialValue == "" || this.initialValue == null) {
            this.initialValue = 0;
        }
        else {
            this.initialValue = parseInt(this.initialValue);
        }
    };
    UpdownComponent.prototype.ngOnChanges = function (event) {
        if (event.style != undefined && event.style.currentValue != undefined) {
            var css = event.style.currentValue;
            this.elementRef.nativeElement.style.setProperty('--c-width', css['c-width']);
            this.elementRef.nativeElement.style.setProperty('--c-height', css['c-height']);
            this.elementRef.nativeElement.style.setProperty('--label-left', css['label-left']);
            this.elementRef.nativeElement.style.setProperty('--label-top', css['label-top']);
        }
        if (event.valueStyle != undefined && event.valueStyle.currentValue != undefined) {
            var css = event.valueStyle.currentValue;
            this.elementRef.nativeElement.style.setProperty('--value-left', css['value-left']);
            this.elementRef.nativeElement.style.setProperty('--value-top', css['value-top']);
        }
    };
    UpdownComponent.prototype.styleObject = function () {
        var nType = {};
        Object.assign(nType, this.valueStyle);
        Object.assign(nType, this.borderStyle);
        return nType;
    };
    UpdownComponent.prototype.increaseValue = function () {
        if (this.initialValue == undefined || this.initialValue == "" || this.initialValue == null) {
            this.initialValue = 0;
        }
        this.initialValue += 1;
        this.valueChange.emit(this.initialValue);
    };
    UpdownComponent.prototype.decreaseValue = function () {
        if (this.initialValue == undefined || this.initialValue == "" || this.initialValue == null) {
            this.initialValue = 0;
        }
        if (this.initialValue > 0) {
            this.initialValue -= 1;
            this.valueChange.emit(this.initialValue);
        }
        if (this.isNagative) {
            this.initialValue -= 1;
            this.valueChange.emit(this.initialValue);
        }
        return false;
    };
    UpdownComponent.prototype.onBlurMethod = function () {
        this.valueChange.emit(this.initialValue);
    };
    UpdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], UpdownComponent.prototype, "initialValue", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "switchStyle", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "isNagative", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "textAlign", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "isLabel", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "style", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "valueStyle", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "borderStyle", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "signalStyle", void 0);
    __decorate([
        Input()
    ], UpdownComponent.prototype, "staticStyle", void 0);
    __decorate([
        Output()
    ], UpdownComponent.prototype, "valueChange", void 0);
    UpdownComponent = __decorate([
        Component({
            selector: 'sml-input-updown',
            template: "\n  <div class=\"position-relative\">\n  <div class=\"input-field\" \n    [ngClass]=\"{'float-group':switchStyle,'float-groupdd': !switchStyle,'signal-line': signalStyle,'float-group-static': staticStyle}\"\n    [ngStyle]=\"borderStyle\">\n    <input \n        type=\"number\" \n        [(ngModel)]=\"initialValue\" \n        [ngStyle]=\"valueStyle\"\n        (blur)=\"onBlurMethod()\"\n        [style.text-align]=\"textAlign\"\n        class=\"form-control\" required>\n    <div class=\"numberSpinner\">\n      <a href=\"javascript:void(0)\" (click)=\"increaseValue()\" class=\"spinnerBtn\">\n        <i class=\"fa fa-caret-up\"></i>\n      </a>\n      <a href=\"javascript:void(0)\" (click)=\"decreaseValue()\" class=\"spinnerBtn\">\n        <i class=\"fa fa-caret-down\"></i>\n      </a>\n    </div>\n    <label *ngIf=\"isLabel\" [ngStyle]=\"style\" class=\"label\">{{label}}</label>\n  </div>\n</div>\n  ",
            styles: ["\n  /* css variable */\n  :host {\n      --c-width: 100%;\n      --c-height: 25px;\n      --label-left: 10px;\n      --label-top: 0px;\n      --value-left: 10px;\n      --value-top: 0px;\n  }\n  /* box css */\n  .position-relative {\n      position: relative;\n      width: var(--c-width) !important;\n  }\n  .input-field {\n      border: 1px solid #dee2e6;\n      border-radius: 2px;\n      min-height: var(--c-height) !important;\n      height: auto;\n  }\n  /* control css */\n  .form-control {\n      display: block;\n      padding-top: 0.375rem;\n      padding-right: var(--value-left);\n      padding-bottom: 0.375rem;\n      padding-left: 0.75rem;\n      font-size: 1rem;\n      line-height: 1.5;\n      color: #495057;\n      background-color: #fff;\n      background-clip: padding-box;\n      border: none;\n      text-align: right;\n      min-height: var(--c-height) !important;\n      transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n  }\n  .form-control {\n      background-color: inherit;\n      box-shadow: none !important;\n  }\n  .signal-line{\n      border-top: none !important;\n      border-left: none !important;\n      border-right: none !important;\n      border-radius: 0px !important;\n  }\n  /* labelcss */\n  .label{\n      position: absolute; \n      top: -24px;\n      left: 0px; \n      font-size: 12px;\n      padding: 0px !important;\n        text-align: left;\n  }\n  .float-group {\n      position: relative;\n      padding: 14px 7px 2px 0px;\n  }\n  .float-group .form-control {\n      padding-top: var(--value-top);\n      padding-right: var(--value-left);\n      padding-bottom: 0px;\n      padding-left: var(--value-left);\n  }\n  .float-group .label {\n      font-size: 12px;\n      font-weight: normal;\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      left: var(--label-left);\n      transition: all 200ms;\n      opacity: 1;\n      margin: 0;\n      width: 87%;\n      height: auto;\n  }\n  .float-group .form-control:focus {\n      outline: none !important;\n      box-shadow: none;\n  }\n  .float-group-static .label {\n    font-size: 9px;\n      font-weight: bold !important;  /* floating lable always bold */\n      position: absolute;\n      top: var(--label-top);\n      left: var(--label-left);\n      transform: translateY(0px);\n      transition: all 200ms;\n      opacity: 1;\n      margin: 0;\n      width: 87%;\n      height: auto;\n  }\n  .float-group .form-control:focus-within ~ .label,.float-group .form-control:valid ~ .label {\n      font-size: 9px;\n      font-weight: bold !important;  /* floating lable always bold */\n      position: absolute;\n      top: var(--label-top);\n      left: var(--label-left);\n      transform: translateY(0px);\n      transition: all 200ms;\n      opacity: 1;\n      margin: 0;\n      width: 87%;\n      height: auto;\n  }\n  \n  .numberSpinner {\n      display: inline-flex;\n      flex-direction: column;\n      position: absolute;\n      right: 0px;\n      top: 0px;\n      bottom: 0px;\n      border-top-right-radius: 2px;\n      border-bottom-right-radius: 2px;\n      overflow: hidden;\n      z-index: 1;\n  }\n  .spinnerBtn {\n      background: #f1f1f1;\n      border: none;\n      font-size: 14px;\n      color: initial;\n      padding: 0 7px;\n      display: flex;\n      height: 50%;\n      align-items: center;\n      justify-content: center;\n  }\n  .spinnerBtn:active {\n      color: #fff;\n      background: #666666!important;\n  }\n  .spinnerBtn:hover {\n      background: #d1d1d1;\n      text-decoration: none;\n  }\n  input[type=number]::-webkit-inner-spin-button{\n      opacity: 0;\n      font-size: 14px\n  } \n  "]
        })
    ], UpdownComponent);
    return UpdownComponent;
}());
export { UpdownComponent };
//# sourceMappingURL=data:application/json;base64,