import { __decorate } from "tslib";
import { Component, OnInit, Input, Output, EventEmitter, ElementRef } from '@angular/core';
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(elementRef) {
        this.elementRef = elementRef;
        this.isChecked = false;
        this.isBorderStyle = false;
        this.toggleStyle = new EventEmitter();
    }
    SwitchComponent.prototype.ngOnInit = function () {
    };
    SwitchComponent.prototype.ngOnChanges = function (event) {
        if (event.switchStyles != undefined && event.switchStyles.currentValue != undefined) {
            var css = event.switchStyles.currentValue;
            this.elementRef.nativeElement.style.setProperty('--switch-width', css.width);
            this.elementRef.nativeElement.style.setProperty('--switch-height', css.height);
            this.elementRef.nativeElement.style.setProperty('--switch-ball-size', this.getBallSize(css));
            this.elementRef.nativeElement.style.setProperty('--switch-border-width', css.borderwidth);
            this.elementRef.nativeElement.style.setProperty('--switch-border-radius', css.borderradius);
            this.elementRef.nativeElement.style.setProperty('--switch-border-color', css.bordercolor);
            this.elementRef.nativeElement.style.setProperty('--switch-background-checked', css.background);
            this.elementRef.nativeElement.style.setProperty('--switch-background-unchecked', css['background-unchecked']);
            this.elementRef.nativeElement.style.setProperty('--switch-color', css.colorcheck);
            this.elementRef.nativeElement.style.setProperty('--switch-radius', css.ballradius);
            this.elementRef.nativeElement.style.setProperty('--switch-transformx', this.getTransformx(css));
        }
        if (event.labelStyle != undefined && event.labelStyle.currentValue != undefined) {
            var css = event.labelStyle.currentValue;
            this.elementRef.nativeElement.style.setProperty('--c-width', css['c-width']);
            this.elementRef.nativeElement.style.setProperty('--c-height', css['c-height']);
            this.elementRef.nativeElement.style.setProperty('--label-left', css['label-left']);
            this.elementRef.nativeElement.style.setProperty('--label-top', css['label-top']);
        }
        if (event.valueStyle != undefined && event.valueStyle.currentValue != undefined) {
            var css = event.valueStyle.currentValue;
            this.elementRef.nativeElement.style.setProperty('--value-left', css['value-left']);
            this.elementRef.nativeElement.style.setProperty('--value-top', css['value-top']);
        }
    };
    SwitchComponent.prototype.getTransformx = function (css) {
        var w = css.width.replace('px', '');
        var h = css.height.replace('px', '');
        var trx = ((w - (h - 8)) - 8);
        return trx + 'px';
    };
    SwitchComponent.prototype.getBallSize = function (css) {
        var h = css.height.replace('px', '');
        var bw = css.borderwidth.replace('px', '');
        return (h - 8 - (bw * 2)) + 'px';
    };
    SwitchComponent.prototype.onChange = function (event) {
        this.toggleStyle.emit(this.isChecked);
    };
    SwitchComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], SwitchComponent.prototype, "labelText", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "isChecked", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "switchStyles", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "switchStyle", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "valueStyle", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "labelStyle", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "borderStyle", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "signalStyle", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "isBorderStyle", void 0);
    __decorate([
        Output()
    ], SwitchComponent.prototype, "toggleStyle", void 0);
    SwitchComponent = __decorate([
        Component({
            selector: 'sml-input-switch',
            template: "\n  <div class=\"position-relative\">\n  <div class=\"input-field\" [ngClass]=\"{'float-group':switchStyle,'float-groupdd': !switchStyle,'signal-line': signalStyle}\"\n    [ngStyle]=\"borderStyle\">\n    <div class=\"form-ctr\">\n      <label class=\"switch\">\n        <input type=\"checkbox\" [(ngModel)]=\"isChecked\" \n        (change)=\"onChange($event)\" id=\"togBtn\">\n        <div class=\"slider round\">\n          <span class=\"on\" [ngStyle]=\"valueStyle\">{{switchStyles?.labelChekecd}}</span>\n          <span class=\"off\" [ngStyle]=\"valueStyle\">{{switchStyles?.labelUnChekecd}}</span>\n        </div>\n      </label>\n      <label class=\"label\" [ngStyle]=\"labelStyle\">{{label}}</label>\n    </div>\n  </div>\n  </div>\n  ",
            styles: ["\n  :host {\n    --c-width: 645px;\n    --c-height: 25px;\n    --switch-width: 70px;\n    --switch-height: 34px;\n    --switch-height: 34px;\n    --switch-ball-size: 26px;\n    --switch-border-width: 0px;\n    --switch-border-radius: 34px;\n    --switch-border-color: #D5DBE0;\n    --switch-background-checked: #348fe2;\n    --switch-background-unchecked:#D5DBE0;\n    --switch-color: #ffffff;\n    --switch-radius: 34px;\n    --switch-transformx: 35px;\n    --label-left: 10px;\n    --label-top: 0px;\n    --value-left: 10px;\n    --value-top: 0px;\n}\n/* box css */\n.position-relative {\n    position: relative;\n}\n.input-field {\n    border: 1px solid #dee2e6;\n    border-radius: 2px;\n    width: var(--c-width) !important;\n    min-height: var(--c-height) !important;\n    height: auto;\n}\n.switch {\n    position: relative;\n    display: inline-block;\n    width: var(--switch-width);\n    height: var(--switch-height);\n}\n.switch input {\n    display:none;\n}\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--switch-background-unchecked);\n    -webkit-transition: .4s;\n    transition: .4s;\n}\n.slider:before {\n    position: absolute;\n    content: \"\";\n    height: var(--switch-ball-size);\n    width: var(--switch-ball-size);\n    left: 4px;\n    bottom: 4px;\n    background-color: var(--switch-color);\n    -webkit-transition: .4s;\n    transition: .4s;\n}\ninput:checked + .slider {\n    background-color: var(--switch-background-checked);\n}\ninput:focus + .slider {\n    box-shadow: 0 0 1px var(--switch-background-checked);\n}\ninput:checked + .slider:before {\n    -webkit-transform: translateX(var(--switch-transformx));\n    -ms-transform: translateX(var(--switch-transformx));    \n    transform: translateX(var(--switch-transformx));\n}  \n.on{\n    display: none;\n}\n.on{\n    color: var(--switch-color);\n    position: absolute;\n    transform: translate(-60%,-50%);\n    top: 50%;\n    left: 40%;\n    font-size: 10px;\n    font-family: Verdana, sans-serif;\n}\n.off{\n    color: var(--switch-color);\n    position: absolute;\n    transform: translate(-40%,-50%);\n    top: 50%;\n    left: 60%;\n    font-size: 10px;\n    font-family: Verdana, sans-serif;\n}\ninput:checked+ .slider .on{\n    display: block;\n}\ninput:checked + .slider .off{\n    display: none;\n}\n.slider.round {\n    border-radius: var(--switch-border-radius);\n    border-width: var(--switch-border-width) !important;\n    border-color: var(--switch-border-color) !important;\n    border: 1px solid;\n}\n.slider.round:before {\n    border-radius: var(--switch-radius);\n}\n.form-ctr{\n    display: block;\n    padding-top: 8px;\n    padding-right: 0.75rem;\n    padding-bottom: 3px;\n    padding-left: var(--value-left);\n    min-height: var(--c-height) !important;\n}\n.signal-line{\n    border-top: none !important;\n    border-left: none !important;\n    border-right: none !important;\n    border-radius: 0px !important;\n}\nlabel{\n    margin-bottom: 0px !important;\n}\n.label {\n    position: absolute;\n    top: -24px;\n    left: 0px; \n    font-size: 12px;\n    transition: all 0.1s;\n}\n.float-group {\n    position: relative;\n    padding: 14px 24px 0px 0px;\n}\n.float-group .form-ctr {\n    padding-top: var(--value-top);\n    padding-right: 0px;\n    padding-bottom: 0px;\n    padding-left: var(--value-left);\n}\n.float-group .label {\n  font-size: 9px;\n  font-weight: bold !important;  /* floating lable always bold */\n  position: absolute;\n  top: var(--label-top);\n  left: var(--label-left);\n  transform: translateY(0px);\n  transition: all 200ms;\n  opacity: 1;\n  margin: 0;\n  width: 87%;\n  height: auto;\n}\n  "]
        })
    ], SwitchComponent);
    return SwitchComponent;
}());
export { SwitchComponent };
//# sourceMappingURL=data:application/json;base64,