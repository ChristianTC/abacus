import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { HttpClient, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';
var ImagesLightBoxComponent = /** @class */ (function () {
    function ImagesLightBoxComponent(http) {
        this.http = http;
        this.apiURL = 'http://apinext.aaadev.info/apinext/';
        this.fileurl = 'http://preview.abacuscrm.net/media/';
        this.database = 'APPS';
        this.FilesGroupId = "0";
        this.fileResponse = new EventEmitter;
        this.body = {};
        this.allowFiles = ['image/jpeg', 'image/png', 'application/pdf', 'audio/mp3', 'video/mp4', 'text/plain'];
        this.GenericToken = "";
        this.imagesData = [];
        this.error_message = '';
        this.httpOptionJSON = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        this.slideIndex = 1;
        this.slideDescription = '';
    }
    ImagesLightBoxComponent.prototype.ngOnInit = function () {
        this.getToken();
    };
    ImagesLightBoxComponent.prototype.getToken = function () {
        var _this = this;
        if (this.GenericToken == "") {
            this.http.get(this.apiURL + "GetSystemInfo?passcode=flipper613").subscribe(function (res) {
                _this.GenericToken = res["GenericToken"];
                _this.getListdata();
            });
        }
        else {
            this.getListdata();
        }
    };
    ImagesLightBoxComponent.prototype.getListdata = function () {
        var _this = this;
        if (this.FilesGroupId) {
            this.body['FilesGroupId'] = this.FilesGroupId;
            var url = this.apiURL + "Data/Exec/" + this.database + "/core/FILES_List?api_key=" + this.GenericToken;
            this.http.post(url, this.body, this.httpOptionJSON).subscribe(function (res) {
                var temp = [];
                _this.imagesData = [];
                temp = res;
                for (var i = 0; i < temp.length; i++) {
                    var nType = {
                        path: _this.fileurl + temp[i].FileUrl,
                        description: temp[i].Description,
                        FilesId: temp[i].FilesId,
                        type: _this.getFileType(temp[i].FileUrl)
                    };
                    _this.imagesData.push(nType);
                }
            });
        }
    };
    ImagesLightBoxComponent.prototype.getFileType = function (url) {
        var arr = url.split(".");
        if (arr && arr.length == 2) {
            if (arr[1] == 'jpg' || arr[1] == 'JPG' || arr[1] == 'jpeg' || arr[1] == 'JPEG' || arr[1] == 'png' || arr[1] == 'PNG' || arr[1] == 'gif' || arr[1] == 'GIF' || arr[1] == 'svg' || arr[1] == 'SVG') {
                return 'Image';
            }
            if (arr[1] == 'txt' || arr[1] == 'TXT') {
                return 'Text';
            }
            if (arr[1] == 'mp3' || arr[1] == 'MP3') {
                return 'Audio';
            }
            if (arr[1] == 'mp4' || arr[1] == 'MP4') {
                return 'Video';
            }
            if (arr[1] == 'pdf' || arr[1] == 'PDF') {
                return 'Pdf';
            }
            if (arr[1] == 'csv' || arr[1] == 'CSV') {
                return 'Csv';
            }
            if (arr[1] == 'doc' || arr[1] == 'DOC') {
                return 'Doc';
            }
            if (arr[1] == 'ppt' || arr[1] == 'PPT') {
                return 'Ppt';
            }
            if (arr[1] == 'xls' || arr[1] == 'XLS') {
                return 'Xls';
            }
        }
        else {
            return 'File';
        }
    };
    ImagesLightBoxComponent.prototype.uploadAndProgress = function (files) {
        var _this = this;
        console.log(files);
        var flag = false;
        var _loop_1 = function (j) {
            var sel = this_1.allowFiles.filter(function (d) { return d == files[j].type; });
            if (sel.length == 0) {
                flag = true;
                return "break";
            }
        };
        var this_1 = this;
        for (var j = 0; j < files.length; j++) {
            var state_1 = _loop_1(j);
            if (state_1 === "break")
                break;
        }
        if (flag) {
            this.error_message = "Invalid File Format. Allow Only This Format " + this.allowFiles.toString() + ".";
        }
        else {
            this.error_message = "";
            for (var i = 0; i < files.length; i++) {
                var formData = new FormData();
                formData.append('file', files[i], files[i].name);
                formData.append('id', '0');
                formData.append('filegroupid', this.FilesGroupId);
                formData.append('mediaType', 'example');
                formData.append('description', files[i].name);
                this.http.post(this.apiURL + 'uploader/uploadnew', formData, { reportProgress: true, observe: 'events' })
                    .subscribe(function (event) {
                    if (event.type === HttpEventType.UploadProgress) {
                        _this.percentDone = Math.round(100 * event.loaded / event.total);
                    }
                    else if (event instanceof HttpResponse) {
                        _this.uploadSuccess = true;
                        _this.fileResponse.emit(event.body);
                        _this.FilesGroupId = event.body['FilesGroupId'];
                        _this.getListdata();
                        setTimeout(function () {
                            _this.uploadSuccess = false;
                            _this.percentDone = 0;
                        }, 3000);
                    }
                });
            }
        }
    };
    ImagesLightBoxComponent.prototype.deleteFIles = function (value, index) {
        var _this = this;
        this.http.delete(this.apiURL + "Models/files/" + value + "?api_key=" + this.GenericToken).subscribe(function (res) {
            if (res) {
                _this.imagesData.splice(index, 1);
            }
        });
    };
    ImagesLightBoxComponent.prototype.openModal = function () {
        document.getElementById("myModallightbox").style.display = "block";
    };
    ImagesLightBoxComponent.prototype.closeModal = function () {
        document.getElementById("myModallightbox").style.display = "none";
    };
    ImagesLightBoxComponent.prototype.plusSlides = function (n) {
        this.showSlides(this.slideIndex += n);
    };
    ImagesLightBoxComponent.prototype.currentSlide = function (n) {
        this.showSlides(this.slideIndex = n);
    };
    ImagesLightBoxComponent.prototype.showSlides = function (n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            this.slideIndex = 1;
        }
        if (n < 1) {
            this.slideIndex = slides.length;
        }
        for (i = 0; i < slides.length; i++) {
            slides[i]['style'].display = "none";
        }
        slides[this.slideIndex - 1]['style'].display = "block";
        this.slideDescription = this.imagesData[this.slideIndex - 1].description;
    };
    ImagesLightBoxComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "apiURL", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "fileurl", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "database", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "FilesGroupId", void 0);
    __decorate([
        Output()
    ], ImagesLightBoxComponent.prototype, "fileResponse", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "body", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "allowFiles", void 0);
    __decorate([
        Input()
    ], ImagesLightBoxComponent.prototype, "GenericToken", void 0);
    ImagesLightBoxComponent = __decorate([
        Component({
            selector: 'sml-images-light-box',
            template: "\n  <div class=\"w-100\">\n  <div class=\"error-msg\" *ngIf=\"error_message != ''\">{{error_message}}</div>\n  <label class=\"dropdownarea mar-b-0\">\n    <div class=\"d-flex w-100 flex-column\">\n      <input type=\"file\" multiple id=\"other\" (change)=\"uploadAndProgress($event.target.files)\" class=\"drag\" />\n      <div class=\"d-flex justify-content-between align-items-center w-100 flex-column\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n          <span class=\"uploadicon\">\n            <img src=\"./assets/upload.png\" />\n          </span>\n          <div class=\"d-flex flex-column position-relative w79\">\n            <div class=\"fz14\">Choose a file or drag it here.\n              <br />\n              <span *ngIf=\"percentDone\"> Upload Percent: {{percentDone}}%</span>\n            </div>\n            <div class=\"progressContainer\">\n              <div class=\"procesbar\"></div>\n              <div class=\"w-100 z9\" *ngIf=\"percentDone\">\n                <div class=\"progressbar\" [ngStyle]=\"{'width.%':percentDone}\"></div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"uploadSuccess\" class=\"successmsg\">Upload Successful</div>\n        </div>\n      </div>\n    </div>\n  </label>\n  <div class=\"col-md-12 mt-2 sml-light-box-scroll-y\" style=\"padding-right: 8px;\">\n    <div class=\"row\">\n    <div class=\"column position-relative\" *ngFor=\"let img of imagesData;let i=index\">\n    <span *ngIf=\"img.type == 'Image'\">\n      <img [src]=\"img.path\" height=\"96\" width=\"100%\" onerror=\"this.onerror=null; this.src='assets/404_images.png'\" (click)=\"openModal();currentSlide(i+1)\"\n        class=\"hover-shadow cursor\">\n    </span>\n    <span *ngIf=\"img.type == 'Text'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/txt_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Pdf'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/pdf_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Audio'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/audio_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Video'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/video_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Doc'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/doc_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Csv'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/csv_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Ppt'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/ppt_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span *ngIf=\"img.type == 'Xls'\">\n      <a [href]=\"img.path\" target=\"_blank\">\n        <img src=\"assets/xls_icon.png\" height=\"96\" width=\"100%\" class=\"hover-shadow cursor\">\n      </a>\n    </span>\n    <span class=\"remove_icon\">\n      <i class=\"fa fa-times\" (click)=\"deleteFIles(img.FilesId,i)\"></i>\n    </span>\n  </div>\n    </div>\n  </div>\n</div>\n<div id=\"myModallightbox\" class=\"modal\">\n  <span class=\"close cursor\" (click)=\"closeModal()\">&times;</span>\n  <div class=\"modal-content\">\n    <div style=\"margin: auto;width: 80%;\">\n      <div class=\"mySlides\" *ngFor=\"let img of imagesData;let i=index\">\n        <div class=\"numbertext\">{{i + 1}}&nbsp;/&nbsp;{{imagesData.length}}</div>\n        <img [src]=\"img.path\" onerror=\"this.onerror=null; this.src='assets/404_images.png'\"   height=\"450\" style=\"width:100%\">\n      </div>\n    </div>\n    <a class=\"prev\" (click)=\"plusSlides(-1)\">&#10094;</a>\n    <a class=\"next\" (click)=\"plusSlides(1)\">&#10095;</a>\n  </div>\n  <div class=\"caption-container\">\n    <p id=\"caption\" style=\"margin-bottom:0px\">{{slideDescription}}</p>\n  </div>\n</div>\n\t",
            styles: ["\n\t.mar-b-0{\n    margin-bottom: 0px !important;\n}\n.dropdownarea {\n    width: 100%;\n    border: 1px dashed #ccc;\n    padding: 35px 0px;\n    display: flex;\n    align-items: center;\n    height: 65px;\n    text-align: center;\n    align-items: center;\n    position: relative;\n}\n.progressContainer {\n    width: 100%;\n    position: relative;\n    top: 2px;\n}\n.drag {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index:999999;\n}   \n.progressbar {\n    height: 2px;\n    background: green;\n    float: left;\n}\n.fz14 {\n    font-size: 14px;\n}\n.successmsg {\n    font-size: 14px;\n    color: green;\n    width: 25%;\n    text-align: right;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 10px;\n}\n.procesbar {\n    background: #ccc;\n    height: 2px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n}\n.z9 {\n    z-index: 99;\n    position: relative;\n}\n.w79 {\n    width: 82%;\n}\n.uploadicon {\n    padding: 10px;\n}\n.w-100 {\n    width: 100%;\n}\n.d-flex {\n    display: flex;\n}\n.position-relative {\n    position: relative;\n}\n.flex-column {\n    flex-direction: column\n}  \n.justify-content-between {\n    -webkit-box-pack: justify!important;\n    -ms-flex-pack: justify!important;\n    justify-content: space-between!important;\n}\n.row > .column {\n    padding-right: 8px;\n    padding-bottom: 8px;\n}\n.row:after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n.column {\n    float: left;\n    width: 25%;\n}\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1;\n    padding-top: 100px;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: black;\n  }\n.modal-content {\n    position: relative;\n    background-color: black;\n    margin: auto;\n    padding: 0;\n    width: 100%;\n    max-width: 1200px;\n}\n.close {\n    color: white;\n    position: absolute;\n    top: 10px;\n    right: 25px;\n    font-size: 35px;\n    font-weight: bold;\n}\n.close:hover,\n.close:focus {\n    color: #999;\n    text-decoration: none;\n    cursor: pointer;\n}\n.mySlides {\n    display: none;\n}\n.cursor {\n    cursor: pointer;\n}\n.prev,\n.next {\n    cursor: pointer;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: auto;\n    padding: 16px;\n    color: white !important;\n    font-weight: bold;\n    font-size: 20px;\n    transition: 0.6s ease;\n    border-radius: 0 3px 3px 0;\n    user-select: none;\n    -webkit-user-select: none;\n}\n.next {\n    right: 0;\n    border-radius: 3px 0 0 3px;\n}\n.prev:hover,\n.next:hover {\n    background-color: rgba(243, 167, 167, 0.8);\n}\n.numbertext {\n    color: #f2f2f2;\n    font-size: 12px;\n    padding: 8px 12px;\n    position: absolute;\n    top: 0;\n}\n.caption-container {\n    text-align: center;\n    background-color: black;\n    padding: 16px 16px;\n    color: white;\n}\n.demo {\n    opacity: 0.6;\n}\n.active,\n.demo:hover {\n    opacity: 1;\n}\nimg.hover-shadow {\n    transition: 0.3s;\n}\n.hover-shadow:hover {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.sml-light-box-scroll-y {\n    height: auto;\n    max-height:315px;\n    overflow-y: hidden;\n    overflow-x: hidden;\n}\n.sml-light-box-scroll-y:hover {\n    overflow-y: overlay;\n}\n.sml-light-box-scroll-y::-webkit-scrollbar {\n    width: 8px;\n    background-color: #fbfbfb;\n}\n.sml-light-box-scroll-y::-webkit-scrollbar-track {\n    width: 3px;\n    background: rgba(222, 222, 222, .75);\n}\n.sml-light-box-scroll-y::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, .5);\n    border-radius: 4px;\n}\n.remove_icon{\n  position: absolute;\n  right: 13px;\n  top: -2px;\n  cursor: pointer;\n}\n.error-msg{\n  font-size: 13px;\n  text-align: center;\n  color: red\n}\n\t"]
        })
    ], ImagesLightBoxComponent);
    return ImagesLightBoxComponent;
}());
export { ImagesLightBoxComponent };
//# sourceMappingURL=data:application/json;base64,