import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { HttpClient, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';
import * as moment_ from 'moment';
var moment = moment_;
var NotesComponent = /** @class */ (function () {
    function NotesComponent(http) {
        this.http = http;
        this.noteId = "0";
        this.noteData = [];
        this.apiURL = 'http://apinext.aaadev.info/apinext/';
        this.fileurl = 'http://preview.abacuscrm.net/media/';
        this.GenericToken = "";
        this.dataBase = "APPS";
        this.spList = "core/NOTE_ListLog";
        this.clickMethod = new EventEmitter();
        this.myInput = { value: '' };
        this.NoteObject = {
            NoteId: 0,
            Notes: "",
            ChangedBy: ""
        };
        this.httpOptionJSON = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        this.User = JSON.parse(localStorage.getItem('Session.User'));
    }
    NotesComponent.prototype.ngOnInit = function () {
        this.getNotes();
    };
    NotesComponent.prototype.getNotes = function () {
        var _this = this;
        if (this.noteId == '0') {
            return false;
        }
        this.noteData = [];
        var url = this.apiURL + "Data/Exec/" + this.dataBase + "/" + this.spList + "?api_key=" + this.GenericToken;
        var body = {
            NoteId: this.noteId
        };
        this.http.post(url, body, this.httpOptionJSON).subscribe(function (data) {
            if (data) {
                var temp = [];
                for (var i = 0; i < data.length; i++) {
                    var nType = {
                        user: data[i].ChangedBy == '' ? (_this.User.FirstName + ' ' + _this.User.LastName) : data[i].ChangedByComplete,
                        userUrl: _this.fileurl + data[i].FileUrl,
                        note: data[i].Notes,
                        date: _this.format(data[i].ChangedOn, 'MM/DD/YYYY'),
                        time: _this.format(data[i].ChangedOn, 'HH:MM:SS A'),
                        read: data[i].IsAction == "True" ? 'unread' : 'read',
                    };
                    temp.push(nType);
                }
                _this.noteData = _this.groupBy(temp);
            }
        });
    };
    NotesComponent.prototype.saveNote = function () {
        var _this = this;
        if (this.noteId != "0") {
            this.NoteObject.ChangedBy = this.User.UserName;
            this.NoteObject.NoteId = this.noteId;
            var url = this.apiURL + "Data/Exec/" + this.dataBase + "/core/NOTE_SaveLog?api_key=" + this.GenericToken;
            this.http.post(url, this.NoteObject, this.httpOptionJSON).subscribe(function (note) {
                _this.NoteObject.Notes = "";
                _this.getNotes();
            }, function (error) {
                alert(error);
            });
        }
    };
    NotesComponent.prototype.onInput = function (event) {
        var code = event.keyCode;
        var note = event.target.value;
        if (code == 13 && note != '') {
            this.NoteObject.Notes = note;
            this.clickMethod.emit({ note: note });
            this.saveNote();
            event.target.value = '';
        }
    };
    NotesComponent.prototype.onInput1 = function (event) {
        var note = event;
        this.NoteObject.Notes = note;
        this.clickMethod.emit({ note: note });
        this.saveNote();
        this.myInput = '';
        event = '';
    };
    NotesComponent.prototype.isToday = function (date) {
        if (moment(date).format('MM/DD/YYYY') == moment(new Date()).format('MM/DD/YYYY')) {
            return 'Today';
        }
        return date;
    };
    NotesComponent.prototype.groupBy = function (data) {
        var groupByDate = {};
        var groupByarray = [];
        data.forEach(function (a) {
            groupByDate[a.date] = groupByDate[a.date] || [];
            groupByDate[a.date].push({
                user: a.user,
                userUrl: a.userUrl,
                note: a.note,
                date: a.date,
                time: a.time,
                read: a.read
            });
        });
        for (var key in groupByDate) {
            var nType = {
                date: key,
                noteData: groupByDate[key]
            };
            groupByarray.push(nType);
        }
        return groupByarray;
    };
    NotesComponent.prototype.format = function (data, format) {
        return moment(new Date(data)).format(format);
    };
    NotesComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input()
    ], NotesComponent.prototype, "noteId", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "noteData", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "apiURL", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "fileurl", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "GenericToken", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "dataBase", void 0);
    __decorate([
        Input()
    ], NotesComponent.prototype, "spList", void 0);
    __decorate([
        Output()
    ], NotesComponent.prototype, "clickMethod", void 0);
    NotesComponent = __decorate([
        Component({
            selector: 'sml-notes',
            template: "\n\n  <div class=\"notesWrapper\">\n    <h4 class=\"head\">Notes</h4>\n    <div class=\"notesLayout\">\n        <div class=\"notesTextType\">\n            <div class=\"noteTextContainer\">\n                <textarea rows=\"3\" class=\"noteTexarea\" #textarea [(ngModel)]=\"myInput.value\" (keyup)=\"onInput($event)\" name=\"chat\">\n                </textarea>\n                    <label class=\"label\" [ngClass]=\"{'op':myInput.value != ''}\" >Enter your note here</label>\n                <a (click)=\"this.onInput1(textarea.value)\" class=\"postBtn\">\n                    <span class=\"divider\">|</span>\n                    <img src=\"assets/send.png\" class=\"sendimg\">\n                </a>\n            </div>\n            <div class=\"hr\"></div>\n        </div>\n        <div class=\"noteContainer\">\n            <div class=\"notesHistory\">\n              <div *ngFor=\"let dateGroup of noteData\">\n                <div class=\"date\">\n                    {{ isToday(dateGroup.date)}}\n                </div>\n                <ul class=\"notesList\">\n                    <li *ngFor=\"let data of dateGroup.noteData\" class=\"{{data.read}}\">\n                        <div class=\"userImg\">\n                        <span>\n                            <img  src=\"{{data?.userUrl}}\" class=\"avatar\"  onerror=\"this.onerror=null; this.src='assets/usericon.png'\">\n                        </span>\n                        </div>\n                        <div class=\"notesInfo\">\n                            <div class=\"noteinfohead\">\n                                <div class=\"notesNameTiming\">\n                                    <span>{{data.user}} &nbsp;</span>\n                                    <span class=\"noteTime\"> /&nbsp; {{data.time}}</span>\n                                </div>\n                                <div class=\"hrpoint\"></div>\n                                <div class=\"status\">\n                                    <span class=\"notesStatus\"></span>\n                                </div>\n                            </div>\n                            <p class=\"notesMessage\">{{data.note}}</p>\n                        </div>\n                    </li>\n                </ul>\n              </div>  \n            </div>\n        </div>\n    </div>\n</div>\n\n  ",
            styles: ["\n\nul { margin: 0; padding: 0 }\nli { list-style: none; }\n.mylist{width: 100%; display: inline-block;}\n.fz12 { font-size: 12px;  }\n.fz14 { font-size: 14px;  }\n.fz16 { font-size: 16px;  }\n.mgb5{margin-bottom: 5px;}\n.mgt5{margin-top: 5px;}\n.mgt10{margin-top: 10px;}\n.containerComponent{width: 100%; float: left;  padding: 15px; border:1px solid #f5f5f5;}\n.full-w{width: 100%; display: inline-block;}\n.mychatsystem{margin: 0; padding: 0; width: 100%; float: left;}\n.noteInput{resize: none; outline: none; }\n.mychatsystem li{list-style: none;}\n.noteInput{outline: none !important; box-shadow: none;}\n.d-flex{display: flex;}\n.justify-content-between{justify-content: space-between;}\n.uv_dp { height: 50px; width: 55px; background-color: #f7f7f7; display: inline-block; }\n.bg_list { background-color: #ffd5d5; border-radius: 7px; padding: 7px; font-size: 13px; border-top-left-radius: 0; float: left;}.dp_wrapper { width:100%; display: flex; }\n.uv_details { width: 90%; float: right;  position: relative; top: -27px;}\n.chat_name{font-size: 14px; font-weight: normal; color: #a0a0a0; font-family: sans-serif;}\n.chat_date{font-size: 12px; color: #9e9e9e; margin-left:0; margin-top: 2px; display: inline-block; font-family: sans-serif;}\n.adddata{width: 100%; display: inline-block; padding: 3px; resize: none; border-radius: 3px; border: 1px solid #e6e6e6; font-size: 13px; overflow: hidden; height: 60px;}\n.mylist{float: left; width: 100%;}\n.username{margin-left: 11px; width: 100%; justify-content: flex-end; align-items: flex-end; flex-direction: column;}\n.rightside .uv_details{width: 90%; float: left;  position: relative; top: -27px; text-align: right; align-items: flex-end}\n.secondPersion{display: flex; align-items: flex-end; width: 100%;}\n.fright{display: flex;   width: 100%;   justify-content: flex-end;}\n.meui{margin-right: 13px;}\n.contenttype{margin-right: 18px;}\n.topright{ border-radius: 7px; border-top-right-radius: 0; background-color: #d9fbda;}\n.usernameFirst{margin-left: 14px;}\n.d_line{ position: absolute; width: 100%; height: 1px; background-color: #e6e6e6; top: 56%;   z-index: -1; transform: translateY(-50%);} \n.d_text{ font-weight: 400 !important;  color: #000;} \n.usericon{width: 50px;}\n.notesHistory::-webkit-scrollbar {\n    width: 8px;\n    background-color: #fbfbfb;\n}\n.notesHistory::-webkit-scrollbar-track {\n    width: 3px;\n    background-color: #f0f0f0;\n    border-left: 3px solid #fbfbfb;\n    border-right: 3px solid #fbfbfb\n}\n\n.notesHistory::-webkit-scrollbar-thumb {\n    background-color: #e1e2e2;\n    border-radius: 30px;\n}\n\nbody {\n    font-family: Arial, Helvetica, sans-serif\n}\n\n.notesWrapper {\n    width: 100%;\n    max-width: 460px;\n    margin: 0 auto;\n}\n\n.head {\n    background-color: #f3f3f3;\n    color: #777;\n    padding: 8px 15px;\n    border-radius: 3px;\n}\n\n.notesLayout {\n    background-color: #fbfbfb;\n}\n\n.notesTextType {\n    padding: 12px 30px;\n}\n\n.noteTexarea {\n    width: 100%;\n    border-radius: 0.25em;\n    resize: none;\n    border-color: #d6d6d6;\n    padding: 18px 45px 15px 12px;\n    font-size: 14px\n}\n\n.noteTexarea:focus {\n    border-color: #8e8e8e;\n    outline: none;\n}\n.noteTexarea:focus + .label{\n    top:7px; font-size: 11px;\n    opacity: 0;\n}\n.op{\n    opacity: 0;\n}\n\n.noteTextContainer {\n    position: relative;\n    width: 100%;\n    margin-bottom: 8px\n}\n\n.label {\n    position: absolute;\n    top: 12px;\n    left: 13px;\n    margin-bottom: 0;\n    font-size: 14px;\n    color: #9d9d9dbd;\n    transition: ease-in-out 0.2s;\n}\n\n.postBtn {\n    display: inline-flex;\n    position: absolute;\n    bottom: 15px;\n    right: 12px;\n    text-decoration: none;\n    align-items: center;\n}\n\n.divider {\n    font-size: 20px;\n    color: #d6d6d6;\n}\n\n.hr {\n    width: 100%;\n    height: 1px;\n    background-color: #cddfbd;\n}\n\n.date {\n    text-align: center;\n    color: #abc98e;\n    font-size: 12px;\n    padding: 8px 0\n}\n\n.noteContainer {\n    padding: 0 10px;\n}\n\n.notesHistory {\n    width: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n    height: 400px;\n    padding: 0 20px;\n}\n\n.notesList {\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n}\n\n.notesList li {\n    display: flex;\n    padding: 8px 12px;\n    border-radius: 4px;\n}\n\n.notesList li:not(:last-child) {\n    margin-bottom: 12px;\n}\n\n.notesList li.unread {\n    background-color: #fdeaeb;\n}\n\n.notesList li.read {\n    background-color: #fbfbfb;\n}\n\n.userImg {\n    width: 40px;\n}\n\n.avatar {\n    width: 34px;\n    height: 34px;\n    border-radius: 100%;\n    display: inline-block;\n    overflow: hidden;\n    background-color: #fff;\n}\n\n.notesNameTiming {\n    font-size: 11px;\n    width: 370px;\n}\n\n.noteTime {\n    color: #90b264;\n}\n\n.notesInfo {\n    width: calc(100% - 40px);\n    padding: 4px 0 4px 4px;\n}\n\n.noteinfohead {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    margin-bottom:3px\n}\n\n.hrpoint {\n    width: 100%;\n    height: 1px;\n    background-color: #c5ced5;\n    display: inline-block\n}\n\n.status {\n    width: 50px;\n    text-align: right;\n}\n\n.unread .notesStatus {\n    width: 10px;\n    height: 10px;\n    background-color: #6da23a;\n    display: inline-block;\n    border-radius: 100%;\n}\n\n.read .notesStatus {\n    width: 10px;\n    height: 10px;\n    background-color: #c5ced5;\n    display: inline-block;\n    border-radius: 100%;\n}\n\n.notesMessage {\n    font-size: 14px;\n    margin: 0;\n}\n\n.sendimg {\n    width: 20px;\n    margin-left: 4px;\n    position: relative;\n    top: 3px;\n}\n  "]
        })
    ], NotesComponent);
    return NotesComponent;
}());
export { NotesComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc21sLWNvbXAtbmluZS8iLCJzb3VyY2VzIjpbImxpYi9ub3Rlcy9ub3Rlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMzRixPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUNsQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFxVHZCO0lBdUJJLHdCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBckIzQixXQUFNLEdBQVEsR0FBRyxDQUFDO1FBQ2xCLGFBQVEsR0FBUSxFQUFFLENBQUM7UUFDbkIsV0FBTSxHQUFRLHFDQUFxQyxDQUFDO1FBQ3BELFlBQU8sR0FBVyxxQ0FBcUMsQ0FBQztRQUN4RCxpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQUN2QixhQUFRLEdBQVEsTUFBTSxDQUFDO1FBQ3ZCLFdBQU0sR0FBUSxtQkFBbUIsQ0FBQztRQUNqQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0MsWUFBTyxHQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdCLGVBQVUsR0FBUTtZQUNkLE1BQU0sRUFBRSxDQUFDO1lBQ1QsS0FBSyxFQUFFLEVBQUU7WUFDVCxTQUFTLEVBQUUsRUFBRTtTQUNoQixDQUFDO1FBQ0YsbUJBQWMsR0FBRztZQUNiLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQztnQkFDckIsY0FBYyxFQUFFLGtCQUFrQjthQUNyQyxDQUFDO1NBQ0wsQ0FBQztRQUdFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FB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QyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7O2dCQXZHeUIsVUFBVTs7SUFyQjNCO1FBQVIsS0FBSyxFQUFFO2tEQUFtQjtJQUNsQjtRQUFSLEtBQUssRUFBRTtvREFBb0I7SUFDbkI7UUFBUixLQUFLLEVBQUU7a0RBQXFEO0lBQ3BEO1FBQVIsS0FBSyxFQUFFO21EQUF5RDtJQUN4RDtRQUFSLEtBQUssRUFBRTt3REFBd0I7SUFDdkI7UUFBUixLQUFLLEVBQUU7b0RBQXdCO0lBQ3ZCO1FBQVIsS0FBSyxFQUFFO2tEQUFtQztJQUNqQztRQUFULE1BQU0sRUFBRTt1REFBa0M7SUFUbEMsY0FBYztRQW5UMUIsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFdBQVc7WUFDckIsUUFBUSxFQUFFLGd5RUFtRFg7cUJBQ1UscWdMQTJQVjtTQUNGLENBQUM7T0FDVyxjQUFjLENBK0gxQjtJQUFELHFCQUFDO0NBQUEsQUEvSEQsSUErSEM7U0EvSFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXZlbnRUeXBlLCBIdHRwUmVzcG9uc2UsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50JztcclxuY29uc3QgbW9tZW50ID0gbW9tZW50XztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzbWwtbm90ZXMnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuXHJcbiAgPGRpdiBjbGFzcz1cIm5vdGVzV3JhcHBlclwiPlxyXG4gICAgPGg0IGNsYXNzPVwiaGVhZFwiPk5vdGVzPC9oND5cclxuICAgIDxkaXYgY2xhc3M9XCJub3Rlc0xheW91dFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJub3Rlc1RleHRUeXBlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub3RlVGV4dENvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIHJvd3M9XCIzXCIgY2xhc3M9XCJub3RlVGV4YXJlYVwiICN0ZXh0YXJlYSBbKG5nTW9kZWwpXT1cIm15SW5wdXQudmFsdWVcIiAoa2V5dXApPVwib25JbnB1dCgkZXZlbnQpXCIgbmFtZT1cImNoYXRcIj5cclxuICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibGFiZWxcIiBbbmdDbGFzc109XCJ7J29wJzpteUlucHV0LnZhbHVlICE9ICcnfVwiID5FbnRlciB5b3VyIG5vdGUgaGVyZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8YSAoY2xpY2spPVwidGhpcy5vbklucHV0MSh0ZXh0YXJlYS52YWx1ZSlcIiBjbGFzcz1cInBvc3RCdG5cIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpdmlkZXJcIj58PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3NlbmQucG5nXCIgY2xhc3M9XCJzZW5kaW1nXCI+XHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaHJcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZUNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZXNIaXN0b3J5XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgZGF0ZUdyb3VwIG9mIG5vdGVEYXRhXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt7IGlzVG9kYXkoZGF0ZUdyb3VwLmRhdGUpfX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibm90ZXNMaXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpICpuZ0Zvcj1cImxldCBkYXRhIG9mIGRhdGVHcm91cC5ub3RlRGF0YVwiIGNsYXNzPVwie3tkYXRhLnJlYWR9fVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlckltZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgIHNyYz1cInt7ZGF0YT8udXNlclVybH19XCIgY2xhc3M9XCJhdmF0YXJcIiAgb25lcnJvcj1cInRoaXMub25lcnJvcj1udWxsOyB0aGlzLnNyYz0nYXNzZXRzL3VzZXJpY29uLnBuZydcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGVzSW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGVpbmZvaGVhZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub3Rlc05hbWVUaW1pbmdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3tkYXRhLnVzZXJ9fSAmbmJzcDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibm90ZVRpbWVcIj4gLyZuYnNwOyB7e2RhdGEudGltZX19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJocnBvaW50XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXR1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5vdGVzU3RhdHVzXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIm5vdGVzTWVzc2FnZVwiPnt7ZGF0YS5ub3RlfX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgIDwvZGl2PiAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvZGl2PlxyXG5cclxuICBgLFxyXG4gICAgc3R5bGVzOiBbYFxyXG5cclxudWwgeyBtYXJnaW46IDA7IHBhZGRpbmc6IDAgfVxyXG5saSB7IGxpc3Qtc3R5bGU6IG5vbmU7IH1cclxuLm15bGlzdHt3aWR0aDogMTAwJTsgZGlzcGxheTogaW5saW5lLWJsb2NrO31cclxuLmZ6MTIgeyBmb250LXNpemU6IDEycHg7ICB9XHJcbi5mejE0IHsgZm9udC1zaXplOiAxNHB4OyAgfVxyXG4uZnoxNiB7IGZvbnQtc2l6ZTogMTZweDsgIH1cclxuLm1nYjV7bWFyZ2luLWJvdHRvbTogNXB4O31cclxuLm1ndDV7bWFyZ2luLXRvcDogNXB4O31cclxuLm1ndDEwe21hcmdpbi10b3A6IDEwcHg7fVxyXG4uY29udGFpbmVyQ29tcG9uZW50e3dpZHRoOiAxMDAlOyBmbG9hdDogbGVmdDsgIHBhZGRpbmc6IDE1cHg7IGJvcmRlcjoxcHggc29saWQgI2Y1ZjVmNTt9XHJcbi5mdWxsLXd7d2lkdGg6IDEwMCU7IGRpc3BsYXk6IGlubGluZS1ibG9jazt9XHJcbi5teWNoYXRzeXN0ZW17bWFyZ2luOiAwOyBwYWRkaW5nOiAwOyB3aWR0aDogMTAwJTsgZmxvYXQ6IGxlZnQ7fVxyXG4ubm90ZUlucHV0e3Jlc2l6ZTogbm9uZTsgb3V0bGluZTogbm9uZTsgfVxyXG4ubXljaGF0c3lzdGVtIGxpe2xpc3Qtc3R5bGU6IG5vbmU7fVxyXG4ubm90ZUlucHV0e291dGxpbmU6IG5vbmUgIWltcG9ydGFudDsgYm94LXNoYWRvdzogbm9uZTt9XHJcbi5kLWZsZXh7ZGlzcGxheTogZmxleDt9XHJcbi5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbntqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47fVxyXG4udXZfZHAgeyBoZWlnaHQ6IDUwcHg7IHdpZHRoOiA1NXB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cclxuLmJnX2xpc3QgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkNWQ1OyBib3JkZXItcmFkaXVzOiA3cHg7IHBhZGRpbmc6IDdweDsgZm9udC1zaXplOiAxM3B4OyBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwOyBmbG9hdDogbGVmdDt9LmRwX3dyYXBwZXIgeyB3aWR0aDoxMDAlOyBkaXNwbGF5OiBmbGV4OyB9XHJcbi51dl9kZXRhaWxzIHsgd2lkdGg6IDkwJTsgZmxvYXQ6IHJpZ2h0OyAgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IC0yN3B4O31cclxuLmNoYXRfbmFtZXtmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0OiBub3JtYWw7IGNvbG9yOiAjYTBhMGEwOyBmb250LWZhbWlseTogc2Fucy1zZXJpZjt9XHJcbi5jaGF0X2RhdGV7Zm9udC1zaXplOiAxMnB4OyBjb2xvcjogIzllOWU5ZTsgbWFyZ2luLWxlZnQ6MDsgbWFyZ2luLXRvcDogMnB4OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO31cclxuLmFkZGRhdGF7d2lkdGg6IDEwMCU7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgcGFkZGluZzogM3B4OyByZXNpemU6IG5vbmU7IGJvcmRlci1yYWRpdXM6IDNweDsgYm9yZGVyOiAxcHggc29saWQgI2U2ZTZlNjsgZm9udC1zaXplOiAxM3B4OyBvdmVyZmxvdzogaGlkZGVuOyBoZWlnaHQ6IDYwcHg7fVxyXG4ubXlsaXN0e2Zsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJTt9XHJcbi51c2VybmFtZXttYXJnaW4tbGVmdDogMTFweDsgd2lkdGg6IDEwMCU7IGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IGFsaWduLWl0ZW1zOiBmbGV4LWVuZDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjt9XHJcbi5yaWdodHNpZGUgLnV2X2RldGFpbHN7d2lkdGg6IDkwJTsgZmxvYXQ6IGxlZnQ7ICBwb3NpdGlvbjogcmVsYXRpdmU7IHRvcDogLTI3cHg7IHRleHQtYWxpZ246IHJpZ2h0OyBhbGlnbi1pdGVtczogZmxleC1lbmR9XHJcbi5zZWNvbmRQZXJzaW9ue2Rpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBmbGV4LWVuZDsgd2lkdGg6IDEwMCU7fVxyXG4uZnJpZ2h0e2Rpc3BsYXk6IGZsZXg7ICAgd2lkdGg6IDEwMCU7ICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDt9XHJcbi5tZXVpe21hcmdpbi1yaWdodDogMTNweDt9XHJcbi5jb250ZW50dHlwZXttYXJnaW4tcmlnaHQ6IDE4cHg7fVxyXG4udG9wcmlnaHR7IGJvcmRlci1yYWRpdXM6IDdweDsgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7IGJhY2tncm91bmQtY29sb3I6ICNkOWZiZGE7fVxyXG4udXNlcm5hbWVGaXJzdHttYXJnaW4tbGVmdDogMTRweDt9XHJcbi5kX2xpbmV7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDEwMCU7IGhlaWdodDogMXB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2OyB0b3A6IDU2JTsgICB6LWluZGV4OiAtMTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO30gXHJcbi5kX3RleHR7IGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDsgIGNvbG9yOiAjMDAwO30gXHJcbi51c2VyaWNvbnt3aWR0aDogNTBweDt9XHJcbi5ub3Rlc0hpc3Rvcnk6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIHdpZHRoOiA4cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYmZiO1xyXG59XHJcbi5ub3Rlc0hpc3Rvcnk6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcclxuICAgIHdpZHRoOiAzcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xyXG4gICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjZmJmYmZiO1xyXG4gICAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgI2ZiZmJmYlxyXG59XHJcblxyXG4ubm90ZXNIaXN0b3J5Ojotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTFlMmUyO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcclxufVxyXG5cclxuYm9keSB7XHJcbiAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZlxyXG59XHJcblxyXG4ubm90ZXNXcmFwcGVyIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWF4LXdpZHRoOiA0NjBweDtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcblxyXG4uaGVhZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjNmM2YzO1xyXG4gICAgY29sb3I6ICM3Nzc7XHJcbiAgICBwYWRkaW5nOiA4cHggMTVweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxufVxyXG5cclxuLm5vdGVzTGF5b3V0IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYmZiZmI7XHJcbn1cclxuXHJcbi5ub3Rlc1RleHRUeXBlIHtcclxuICAgIHBhZGRpbmc6IDEycHggMzBweDtcclxufVxyXG5cclxuLm5vdGVUZXhhcmVhIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMC4yNWVtO1xyXG4gICAgcmVzaXplOiBub25lO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZDZkNmQ2O1xyXG4gICAgcGFkZGluZzogMThweCA0NXB4IDE1cHggMTJweDtcclxuICAgIGZvbnQtc2l6ZTogMTRweFxyXG59XHJcblxyXG4ubm90ZVRleGFyZWE6Zm9jdXMge1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjOGU4ZThlO1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxufVxyXG4ubm90ZVRleGFyZWE6Zm9jdXMgKyAubGFiZWx7XHJcbiAgICB0b3A6N3B4OyBmb250LXNpemU6IDExcHg7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG59XHJcbi5vcHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbn1cclxuXHJcbi5ub3RlVGV4dENvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1ib3R0b206IDhweFxyXG59XHJcblxyXG4ubGFiZWwge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAxMnB4O1xyXG4gICAgbGVmdDogMTNweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBjb2xvcjogIzlkOWQ5ZGJkO1xyXG4gICAgdHJhbnNpdGlvbjogZWFzZS1pbi1vdXQgMC4ycztcclxufVxyXG5cclxuLnBvc3RCdG4ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDE1cHg7XHJcbiAgICByaWdodDogMTJweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5kaXZpZGVyIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGNvbG9yOiAjZDZkNmQ2O1xyXG59XHJcblxyXG4uaHIge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDFweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjZGRmYmQ7XHJcbn1cclxuXHJcbi5kYXRlIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGNvbG9yOiAjYWJjOThlO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgcGFkZGluZzogOHB4IDBcclxufVxyXG5cclxuLm5vdGVDb250YWluZXIge1xyXG4gICAgcGFkZGluZzogMCAxMHB4O1xyXG59XHJcblxyXG4ubm90ZXNIaXN0b3J5IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIGhlaWdodDogNDAwcHg7XHJcbiAgICBwYWRkaW5nOiAwIDIwcHg7XHJcbn1cclxuXHJcbi5ub3Rlc0xpc3Qge1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcclxufVxyXG5cclxuLm5vdGVzTGlzdCBsaSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgcGFkZGluZzogOHB4IDEycHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbn1cclxuXHJcbi5ub3Rlc0xpc3QgbGk6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xyXG59XHJcblxyXG4ubm90ZXNMaXN0IGxpLnVucmVhZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRlYWViO1xyXG59XHJcblxyXG4ubm90ZXNMaXN0IGxpLnJlYWQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZmJmYjtcclxufVxyXG5cclxuLnVzZXJJbWcge1xyXG4gICAgd2lkdGg6IDQwcHg7XHJcbn1cclxuXHJcbi5hdmF0YXIge1xyXG4gICAgd2lkdGg6IDM0cHg7XHJcbiAgICBoZWlnaHQ6IDM0cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5ub3Rlc05hbWVUaW1pbmcge1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgd2lkdGg6IDM3MHB4O1xyXG59XHJcblxyXG4ubm90ZVRpbWUge1xyXG4gICAgY29sb3I6ICM5MGIyNjQ7XHJcbn1cclxuXHJcbi5ub3Rlc0luZm8ge1xyXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDQwcHgpO1xyXG4gICAgcGFkZGluZzogNHB4IDAgNHB4IDRweDtcclxufVxyXG5cclxuLm5vdGVpbmZvaGVhZCB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTozcHhcclxufVxyXG5cclxuLmhycG9pbnQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDFweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjNWNlZDU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcclxufVxyXG5cclxuLnN0YXR1cyB7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcblxyXG4udW5yZWFkIC5ub3Rlc1N0YXR1cyB7XHJcbiAgICB3aWR0aDogMTBweDtcclxuICAgIGhlaWdodDogMTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZGEyM2E7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG59XHJcblxyXG4ucmVhZCAubm90ZXNTdGF0dXMge1xyXG4gICAgd2lkdGg6IDEwcHg7XHJcbiAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzVjZWQ1O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxufVxyXG5cclxuLm5vdGVzTWVzc2FnZSB7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi5zZW5kaW1nIHtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDRweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogM3B4O1xyXG59XHJcbiAgYF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5vdGVzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBub3RlSWQ6IGFueSA9IFwiMFwiO1xyXG4gICAgQElucHV0KCkgbm90ZURhdGE6IGFueSA9IFtdO1xyXG4gICAgQElucHV0KCkgYXBpVVJMOiBhbnkgPSAnaHR0cDovL2FwaW5leHQuYWFhZGV2LmluZm8vYXBpbmV4dC8nO1xyXG4gICAgQElucHV0KCkgZmlsZXVybDogc3RyaW5nID0gJ2h0dHA6Ly9wcmV2aWV3LmFiYWN1c2NybS5uZXQvbWVkaWEvJztcclxuICAgIEBJbnB1dCgpIEdlbmVyaWNUb2tlbjogYW55ID0gXCJcIjtcclxuICAgIEBJbnB1dCgpIGRhdGFCYXNlOiBhbnkgPSBcIkFQUFNcIjtcclxuICAgIEBJbnB1dCgpIHNwTGlzdDogYW55ID0gXCJjb3JlL05PVEVfTGlzdExvZ1wiO1xyXG4gICAgQE91dHB1dCgpIGNsaWNrTWV0aG9kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgbXlJbnB1dDogYW55ID0geyB2YWx1ZTogJycgfTtcclxuICAgIFVzZXI6IGFueTtcclxuICAgIE5vdGVPYmplY3Q6IGFueSA9IHtcclxuICAgICAgICBOb3RlSWQ6IDAsXHJcbiAgICAgICAgTm90ZXM6IFwiXCIsXHJcbiAgICAgICAgQ2hhbmdlZEJ5OiBcIlwiXHJcbiAgICB9O1xyXG4gICAgaHR0cE9wdGlvbkpTT04gPSB7XHJcbiAgICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xyXG4gICAgICAgIHRoaXMuVXNlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1Nlc3Npb24uVXNlcicpKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmdldE5vdGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Tm90ZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm90ZUlkID09ICcwJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubm90ZURhdGEgPSBbXTtcclxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmFwaVVSTCArIFwiRGF0YS9FeGVjL1wiICsgdGhpcy5kYXRhQmFzZSArIFwiL1wiICsgdGhpcy5zcExpc3QgKyBcIj9hcGlfa2V5PVwiICsgdGhpcy5HZW5lcmljVG9rZW47XHJcbiAgICAgICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgICAgICAgTm90ZUlkOiB0aGlzLm5vdGVJZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5odHRwLnBvc3QodXJsLCBib2R5LCB0aGlzLmh0dHBPcHRpb25KU09OKS5zdWJzY3JpYmUoKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuVHlwZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogZGF0YVtpXS5DaGFuZ2VkQnkgPT0gJycgPyAodGhpcy5Vc2VyLkZpcnN0TmFtZSArICcgJyArIHRoaXMuVXNlci5MYXN0TmFtZSkgOiBkYXRhW2ldLkNoYW5nZWRCeUNvbXBsZXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyVXJsOiB0aGlzLmZpbGV1cmwgKyBkYXRhW2ldLkZpbGVVcmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGU6IGRhdGFbaV0uTm90ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuZm9ybWF0KGRhdGFbaV0uQ2hhbmdlZE9uLCAnTU0vREQvWVlZWScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdChkYXRhW2ldLkNoYW5nZWRPbiwgJ0hIOk1NOlNTIEEnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZDogZGF0YVtpXS5Jc0FjdGlvbiA9PSBcIlRydWVcIiA/ICd1bnJlYWQnIDogJ3JlYWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLnB1c2goblR5cGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RlRGF0YSA9IHRoaXMuZ3JvdXBCeSh0ZW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVOb3RlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vdGVJZCAhPSBcIjBcIikge1xyXG4gICAgICAgICAgICB0aGlzLk5vdGVPYmplY3QuQ2hhbmdlZEJ5ID0gdGhpcy5Vc2VyLlVzZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLk5vdGVPYmplY3QuTm90ZUlkID0gdGhpcy5ub3RlSWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYXBpVVJMICsgXCJEYXRhL0V4ZWMvXCIgKyB0aGlzLmRhdGFCYXNlICsgXCIvY29yZS9OT1RFX1NhdmVMb2c/YXBpX2tleT1cIiArIHRoaXMuR2VuZXJpY1Rva2VuO1xyXG4gICAgICAgICAgICB0aGlzLmh0dHAucG9zdCh1cmwsIHRoaXMuTm90ZU9iamVjdCwgdGhpcy5odHRwT3B0aW9uSlNPTikuc3Vic2NyaWJlKChub3RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLk5vdGVPYmplY3QuTm90ZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXROb3RlcygpO1xyXG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uSW5wdXQoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGxldCBjb2RlID0gZXZlbnQua2V5Q29kZTtcclxuICAgICAgICBsZXQgbm90ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICBpZiAoY29kZSA9PSAxMyAmJiBub3RlICE9ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuTm90ZU9iamVjdC5Ob3RlcyA9IG5vdGU7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tNZXRob2QuZW1pdCh7IG5vdGUgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZU5vdGUoKTtcclxuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uSW5wdXQxKGV2ZW50KSB7XHJcbiAgICAgICAgbGV0IG5vdGUgPSBldmVudDtcclxuICAgICAgICB0aGlzLk5vdGVPYmplY3QuTm90ZXMgPSBub3RlO1xyXG4gICAgICAgIHRoaXMuY2xpY2tNZXRob2QuZW1pdCh7IG5vdGUgfSk7XHJcbiAgICAgICAgdGhpcy5zYXZlTm90ZSgpO1xyXG4gICAgICAgIHRoaXMubXlJbnB1dCA9ICcnO1xyXG4gICAgICAgIGV2ZW50ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaXNUb2RheShkYXRlKSB7XHJcbiAgICAgICAgaWYgKG1vbWVudChkYXRlKS5mb3JtYXQoJ01NL0REL1lZWVknKSA9PSBtb21lbnQobmV3IERhdGUoKSkuZm9ybWF0KCdNTS9ERC9ZWVlZJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdUb2RheSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGdyb3VwQnkoZGF0YSkge1xyXG4gICAgICAgIGxldCBncm91cEJ5RGF0ZSA9IHt9O1xyXG4gICAgICAgIGxldCBncm91cEJ5YXJyYXkgPSBbXTtcclxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgZ3JvdXBCeURhdGVbYS5kYXRlXSA9IGdyb3VwQnlEYXRlW2EuZGF0ZV0gfHwgW107XHJcbiAgICAgICAgICAgIGdyb3VwQnlEYXRlW2EuZGF0ZV0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB1c2VyOiBhLnVzZXIsXHJcbiAgICAgICAgICAgICAgICB1c2VyVXJsOiBhLnVzZXJVcmwsXHJcbiAgICAgICAgICAgICAgICBub3RlOiBhLm5vdGUsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBhLmRhdGUsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiBhLnRpbWUsXHJcbiAgICAgICAgICAgICAgICByZWFkOiBhLnJlYWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGdyb3VwQnlEYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBuVHlwZSA9IHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IGtleSxcclxuICAgICAgICAgICAgICAgIG5vdGVEYXRhOiBncm91cEJ5RGF0ZVtrZXldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3JvdXBCeWFycmF5LnB1c2goblR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ3JvdXBCeWFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdChkYXRhLCBmb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gbW9tZW50KG5ldyBEYXRlKGRhdGEpKS5mb3JtYXQoZm9ybWF0KTtcclxuICAgIH1cclxufSJdfQ==