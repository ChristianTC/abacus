{"version":3,"file":"text-intellisense.js","sources":["../../../projects/textintellisense/src/lib/text-intellisense.component.ts","../../../projects/textintellisense/src/lib/text-intellisense.module.ts","../../../projects/textintellisense/src/public-api.ts","../../../projects/textintellisense/src/text-intellisense.ts"],"names":["keyboardEventKeyPolyfill"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ElementRef } from '@angular/core';\r\nimport { HttpClient, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\r\ndeclare var $:any;\r\n\r\n@Component({selector: 'emuna-text-intellisense',templateUrl: './text-intellisense.component.html',styleUrls: ['./text-intellisense.component.scss']})\r\n\r\nexport class TextIntellisenseComponent implements OnInit {\r\n\r\n  @Input() Id: string = \"Id\";\r\n  @Input() Name: string = \"Name\";\r\n  @Input() LabelName: string = \"LabelName\";\r\n  @Input() TabIndex: number = 1;\r\n  @Input() Type: string = 'text';\r\n  @Input() Maxlength: number = 255;\r\n  @Input() Value: string = \"\";\r\n  @Input() Rows: number = 1;\r\n  @Input() TriggerCharacter: string = \"{\";\r\n  @Input() LabelStyle: any = {};\r\n  @Input() BorderStyle: any = {};\r\n  @Input() ValueStyle: any = {};\r\n  @Input() ReadOnly: boolean = false;\r\n  @Input() Disabled: boolean = false;\r\n  @Input() LabelTop: boolean = false;\r\n  @Input() database: any = \"ADMIN\";\r\n  @Input() schema: any = \"list\";\r\n  @Input() procedure: any = \"NASS_FIELDS_ListCombo\";\r\n  @Input() fieldName: any = \"TableFullName\";\r\n  @Input() apiURL: any = 'https://emunatemplate.aaadev.info/Api/';\r\n  @Output() GetValue = new EventEmitter;\r\n  @Output() BlurValue = new EventEmitter;\r\n  randKey = Math.floor(Math.random() * 10000000000) + 1;\r\n  showList = false;\r\n  listData: any = [];\r\n  GenericToken: any = \"\";\r\n  leftCss = \"auto\";\r\n  httpOptionJSON = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  };\r\n  \r\n  constructor(private elementRef: ElementRef, private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getToken();\r\n  }\r\n\r\n  ngOnChanges(event) {\r\n    if (event.LabelStyle != undefined && event.LabelStyle.currentValue != undefined) {\r\n        let css = event.LabelStyle.currentValue;\r\n        this.elementRef.nativeElement.style.setProperty('--c-width', css['c-width']);\r\n        this.elementRef.nativeElement.style.setProperty('--c-height', css['c-height']);\r\n        this.elementRef.nativeElement.style.setProperty('--label-left', css['label-left']);\r\n        this.elementRef.nativeElement.style.setProperty('--label-top', css['label-top']);\r\n    }\r\n\r\n    if (event.ValueStyle != undefined && event.ValueStyle.currentValue != undefined) {\r\n        let css = event.ValueStyle.currentValue;\r\n        this.elementRef.nativeElement.style.setProperty('--value-left', css['value-left']);\r\n        this.elementRef.nativeElement.style.setProperty('--value-top', css['value-top']);\r\n    }\r\n  }\r\n\r\n  GetValueEvent(event) {\r\n    var getVal = event.target.value\r\n    this.GetValue.emit(event.target.value);\r\n  }\r\n\r\n  OnBlurEvent(event) {\r\n    this.BlurValue.emit(event.target.value);\r\n  }\r\n\r\n  getToken() {\r\n    if (this.GenericToken == \"\") {\r\n      this.http.get(this.apiURL + \"GetSystemInfo?passcode=flipper613\").subscribe(res => {\r\n        this.GenericToken = res[\"GenericToken\"];\r\n        this.getGlobalField();\r\n      });\r\n    }\r\n  }\r\n\r\n  getGlobalField() {\r\n    const url = this.apiURL + \"Data/Exec/\" + this.database + \"/\" + this.schema + \"/\" + this.procedure + \"?api_key=\" + this.GenericToken;\r\n    this.http.post(url, {}, this.httpOptionJSON).subscribe(res => {\r\n      if (res) {\r\n        this.listData = [];\r\n        let temp: any = [];\r\n        temp = res;\r\n        for (let i = 0; i < temp.length; i++) {\r\n          let nType = {\r\n            id: temp[i].CodeId,\r\n            name: temp[i].Description\r\n          }\r\n          this.listData.push(temp[i].Description);\r\n        }\r\n      } else {\r\n        this.listData = [];\r\n      }\r\n    }, error => {\r\n      this.listData = [];\r\n    });\r\n  }\r\n\r\n  findChoices = (searchText: string) => {\r\n    return this.listData.filter(item =>\r\n      item.toLowerCase().includes(searchText.toLowerCase())\r\n    );\r\n  }\r\n\r\n  getChoiceLabel = (choice: string) => {\r\n    if (this.TriggerCharacter !== '{') {\r\n      return this.TriggerCharacter + choice + ' ';\r\n    } else {\r\n      return '{' + choice + '} ';\r\n    }\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { TextIntellisenseComponent } from './text-intellisense.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { polyfill as keyboardEventKeyPolyfill } from 'keyboardevent-key-polyfill';\r\nimport { TextInputAutocompleteModule } from 'angular-text-input-autocomplete';\r\n\r\nkeyboardEventKeyPolyfill();\r\n\r\n@NgModule({\r\n  declarations: [TextIntellisenseComponent],\r\n  imports: [\r\n  \tCommonModule,\r\n  \tFormsModule,\r\n  \tHttpClientModule,\r\n  \tTextInputAutocompleteModule\r\n  ],\r\n  exports: [TextIntellisenseComponent]\r\n})\r\nexport class TextIntellisense { }\r\n","/*\r\n * Public API Surface of list-search\r\n */\r\nexport * from './lib/text-intellisense.component';\r\nexport * from './lib/text-intellisense.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}