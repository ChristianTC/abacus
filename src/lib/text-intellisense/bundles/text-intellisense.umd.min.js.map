{"version":3,"sources":["../../../projects/textintellisense/src/lib/text-intellisense.component.ts","../../../projects/textintellisense/src/lib/text-intellisense.module.ts"],"names":["TextIntellisenseComponent","elementRef","http","_this","this","Id","Name","LabelName","TabIndex","Type","Maxlength","Value","Rows","TriggerCharacter","LabelStyle","BorderStyle","ValueStyle","ReadOnly","Disabled","LabelTop","database","schema","procedure","fieldName","apiURL","GetValue","EventEmitter","BlurValue","randKey","Math","floor","random","showList","listData","GenericToken","leftCss","httpOptionJSON","headers","HttpHeaders","Content-Type","findChoices","searchText","filter","item","toLowerCase","includes","getChoiceLabel","choice","prototype","ngOnInit","getToken","ngOnChanges","event","undefined","currentValue","css","nativeElement","style","setProperty","GetValueEvent","target","value","emit","OnBlurEvent","get","subscribe","res","getGlobalField","url","post","temp","i","length","CodeId","Description","push","error","Component","args","selector","template","styles","ElementRef","HttpClient","Input","Output","keyboardEventKeyPolyfill","NgModule","declarations","imports","CommonModule","FormsModule","HttpClientModule","TextInputAutocompleteModule","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ElementRef } from '@angular/core';\r\nimport { HttpClient, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\r\ndeclare var $:any;\r\n\r\n@Component({selector: 'emuna-text-intellisense',templateUrl: './text-intellisense.component.html',styleUrls: ['./text-intellisense.component.scss']})\r\n\r\nexport class TextIntellisenseComponent implements OnInit {\r\n\r\n  @Input() Id: string = \"Id\";\r\n  @Input() Name: string = \"Name\";\r\n  @Input() LabelName: string = \"LabelName\";\r\n  @Input() TabIndex: number = 1;\r\n  @Input() Type: string = 'text';\r\n  @Input() Maxlength: number = 255;\r\n  @Input() Value: string = \"\";\r\n  @Input() Rows: number = 1;\r\n  @Input() TriggerCharacter: string = \"{\";\r\n  @Input() LabelStyle: any = {};\r\n  @Input() BorderStyle: any = {};\r\n  @Input() ValueStyle: any = {};\r\n  @Input() ReadOnly: boolean = false;\r\n  @Input() Disabled: boolean = false;\r\n  @Input() LabelTop: boolean = false;\r\n  @Input() database: any = \"ADMIN\";\r\n  @Input() schema: any = \"list\";\r\n  @Input() procedure: any = \"NASS_FIELDS_ListCombo\";\r\n  @Input() fieldName: any = \"TableFullName\";\r\n  @Input() apiURL: any = 'https://emunatemplate.aaadev.info/Api/';\r\n  @Output() GetValue = new EventEmitter;\r\n  @Output() BlurValue = new EventEmitter;\r\n  randKey = Math.floor(Math.random() * 10000000000) + 1;\r\n  showList = false;\r\n  listData: any = [];\r\n  GenericToken: any = \"\";\r\n  leftCss = \"auto\";\r\n  httpOptionJSON = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  };\r\n  \r\n  constructor(private elementRef: ElementRef, private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getToken();\r\n  }\r\n\r\n  ngOnChanges(event) {\r\n    if (event.LabelStyle != undefined && event.LabelStyle.currentValue != undefined) {\r\n        let css = event.LabelStyle.currentValue;\r\n        this.elementRef.nativeElement.style.setProperty('--c-width', css['c-width']);\r\n        this.elementRef.nativeElement.style.setProperty('--c-height', css['c-height']);\r\n        this.elementRef.nativeElement.style.setProperty('--label-left', css['label-left']);\r\n        this.elementRef.nativeElement.style.setProperty('--label-top', css['label-top']);\r\n    }\r\n\r\n    if (event.ValueStyle != undefined && event.ValueStyle.currentValue != undefined) {\r\n        let css = event.ValueStyle.currentValue;\r\n        this.elementRef.nativeElement.style.setProperty('--value-left', css['value-left']);\r\n        this.elementRef.nativeElement.style.setProperty('--value-top', css['value-top']);\r\n    }\r\n  }\r\n\r\n  GetValueEvent(event) {\r\n    var getVal = event.target.value\r\n    this.GetValue.emit(event.target.value);\r\n  }\r\n\r\n  OnBlurEvent(event) {\r\n    this.BlurValue.emit(event.target.value);\r\n  }\r\n\r\n  getToken() {\r\n    if (this.GenericToken == \"\") {\r\n      this.http.get(this.apiURL + \"GetSystemInfo?passcode=flipper613\").subscribe(res => {\r\n        this.GenericToken = res[\"GenericToken\"];\r\n        this.getGlobalField();\r\n      });\r\n    }\r\n  }\r\n\r\n  getGlobalField() {\r\n    const url = this.apiURL + \"Data/Exec/\" + this.database + \"/\" + this.schema + \"/\" + this.procedure + \"?api_key=\" + this.GenericToken;\r\n    this.http.post(url, {}, this.httpOptionJSON).subscribe(res => {\r\n      if (res) {\r\n        this.listData = [];\r\n        let temp: any = [];\r\n        temp = res;\r\n        for (let i = 0; i < temp.length; i++) {\r\n          let nType = {\r\n            id: temp[i].CodeId,\r\n            name: temp[i].Description\r\n          }\r\n          this.listData.push(temp[i].Description);\r\n        }\r\n      } else {\r\n        this.listData = [];\r\n      }\r\n    }, error => {\r\n      this.listData = [];\r\n    });\r\n  }\r\n\r\n  findChoices = (searchText: string) => {\r\n    return this.listData.filter(item =>\r\n      item.toLowerCase().includes(searchText.toLowerCase())\r\n    );\r\n  }\r\n\r\n  getChoiceLabel = (choice: string) => {\r\n    if (this.TriggerCharacter !== '{') {\r\n      return this.TriggerCharacter + choice + ' ';\r\n    } else {\r\n      return '{' + choice + '} ';\r\n    }\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { TextIntellisenseComponent } from './text-intellisense.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { polyfill as keyboardEventKeyPolyfill } from 'keyboardevent-key-polyfill';\r\nimport { TextInputAutocompleteModule } from 'angular-text-input-autocomplete';\r\n\r\nkeyboardEventKeyPolyfill();\r\n\r\n@NgModule({\r\n  declarations: [TextIntellisenseComponent],\r\n  imports: [\r\n  \tCommonModule,\r\n  \tFormsModule,\r\n  \tHttpClientModule,\r\n  \tTextInputAutocompleteModule\r\n  ],\r\n  exports: [TextIntellisenseComponent]\r\n})\r\nexport class TextIntellisense { }\r\n"]}